
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp_____include_bluez_dbus_cpp_adaptor_Agent1_adaptor_h__adaptor__H__
#define __sdbuscpp_____include_bluez_dbus_cpp_adaptor_Agent1_adaptor_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class Agent1_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.Agent1";

protected:
    Agent1_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("Release").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->Release(); });
        object_.registerMethod("RequestPinCode").onInterface(INTERFACE_NAME).implementedAs([this](const sdbus::ObjectPath& device){ return this->RequestPinCode(device); });
        object_.registerMethod("DisplayPinCode").onInterface(INTERFACE_NAME).implementedAs([this](const sdbus::ObjectPath& device, const std::string& pincode){ return this->DisplayPinCode(device, pincode); });
        object_.registerMethod("RequestPasskey").onInterface(INTERFACE_NAME).implementedAs([this](const sdbus::ObjectPath& device){ return this->RequestPasskey(device); });
        object_.registerMethod("DisplayPasskey").onInterface(INTERFACE_NAME).implementedAs([this](const sdbus::ObjectPath& device, const uint32_t& passkey, const uint16_t& entered){ return this->DisplayPasskey(device, passkey, entered); });
        object_.registerMethod("RequestConfirmation").onInterface(INTERFACE_NAME).implementedAs([this](const sdbus::ObjectPath& device, const uint32_t& passkey){ return this->RequestConfirmation(device, passkey); });
        object_.registerMethod("RequestAuthorization").onInterface(INTERFACE_NAME).implementedAs([this](const sdbus::ObjectPath& device){ return this->RequestAuthorization(device); });
        object_.registerMethod("AuthorizeService").onInterface(INTERFACE_NAME).implementedAs([this](const sdbus::ObjectPath& device, const std::string& uuid){ return this->AuthorizeService(device, uuid); });
        object_.registerMethod("Cancel").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->Cancel(); });
    }

    ~Agent1_adaptor() = default;

private:
    virtual void Release() = 0;
    virtual std::string RequestPinCode(const sdbus::ObjectPath& device) = 0;
    virtual void DisplayPinCode(const sdbus::ObjectPath& device, const std::string& pincode) = 0;
    virtual uint32_t RequestPasskey(const sdbus::ObjectPath& device) = 0;
    virtual void DisplayPasskey(const sdbus::ObjectPath& device, const uint32_t& passkey, const uint16_t& entered) = 0;
    virtual void RequestConfirmation(const sdbus::ObjectPath& device, const uint32_t& passkey) = 0;
    virtual void RequestAuthorization(const sdbus::ObjectPath& device) = 0;
    virtual void AuthorizeService(const sdbus::ObjectPath& device, const std::string& uuid) = 0;
    virtual void Cancel() = 0;

private:
    sdbus::IObject& object_;
};

}} // namespaces

#endif
