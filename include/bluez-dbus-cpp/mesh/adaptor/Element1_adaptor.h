
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp_____include_bluez_dbus_cpp_mesh_adaptor_Element1_adaptor_h__adaptor__H__
#define __sdbuscpp_____include_bluez_dbus_cpp_mesh_adaptor_Element1_adaptor_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {
namespace mesh {

class Element1_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.mesh.Element1";

protected:
    Element1_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("MessageReceived").onInterface(INTERFACE_NAME).implementedAs([this](const uint16_t& source, const uint16_t& key_index, const sdbus::Variant& destination, const std::vector<uint8_t>& data){ return this->MessageReceived(source, key_index, destination, data); });
        object_.registerMethod("DevKeyMessageReceived").onInterface(INTERFACE_NAME).implementedAs([this](const uint16_t& source, const bool& remote, const uint16_t& net_index, const std::vector<uint8_t>& data){ return this->DevKeyMessageReceived(source, remote, net_index, data); });
        object_.registerMethod("UpdateModelConfiguration").onInterface(INTERFACE_NAME).implementedAs([this](const uint16_t& model_id, const std::map<std::string, sdbus::Variant>& config){ return this->UpdateModelConfiguration(model_id, config); });
        object_.registerProperty("Index").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Index(); });
        object_.registerProperty("Models").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Models(); });
        object_.registerProperty("VendorModels").onInterface(INTERFACE_NAME).withGetter([this](){ return this->VendorModels(); });
        object_.registerProperty("Location").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Location(); });
    }

    ~Element1_adaptor() = default;

private:
    virtual void MessageReceived(const uint16_t& source, const uint16_t& key_index, const sdbus::Variant& destination, const std::vector<uint8_t>& data) = 0;
    virtual void DevKeyMessageReceived(const uint16_t& source, const bool& remote, const uint16_t& net_index, const std::vector<uint8_t>& data) = 0;
    virtual void UpdateModelConfiguration(const uint16_t& model_id, const std::map<std::string, sdbus::Variant>& config) = 0;

private:
    virtual uint8_t Index() = 0;
    virtual std::vector<sdbus::Struct<uint16_t, std::map<std::string, sdbus::Variant>>> Models() = 0;
    virtual std::vector<sdbus::Struct<uint16_t, uint16_t, std::map<std::string, sdbus::Variant>>> VendorModels() = 0;
    virtual uint16_t Location() = 0;

private:
    sdbus::IObject& object_;
};

}}} // namespaces

#endif
