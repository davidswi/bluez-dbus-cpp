
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp_____include_bluez_dbus_cpp_mesh_adaptor_ProvisionAgent1_adaptor_h__adaptor__H__
#define __sdbuscpp_____include_bluez_dbus_cpp_mesh_adaptor_ProvisionAgent1_adaptor_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {
namespace mesh {

class ProvisionAgent1_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.mesh.ProvisionAgent1";

protected:
    ProvisionAgent1_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("PrivateKey").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->PrivateKey(); });
        object_.registerMethod("PublicKey").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->PublicKey(); });
        object_.registerMethod("DisplayString").onInterface(INTERFACE_NAME).implementedAs([this](const std::string& value){ return this->DisplayString(value); });
        object_.registerMethod("DisplayNumeric").onInterface(INTERFACE_NAME).implementedAs([this](const std::string& type, const uint32_t& number){ return this->DisplayNumeric(type, number); });
        object_.registerMethod("PromptNumeric").onInterface(INTERFACE_NAME).implementedAs([this](const std::string& type){ return this->PromptNumeric(type); });
        object_.registerMethod("PromptStatic").onInterface(INTERFACE_NAME).implementedAs([this](const std::string& type){ return this->PromptStatic(type); });
        object_.registerMethod("Cancel").onInterface(INTERFACE_NAME).implementedAs([this](){ return this->Cancel(); });
        object_.registerProperty("Capabilities").onInterface(INTERFACE_NAME).withGetter([this](){ return this->Capabilities(); });
        object_.registerProperty("OutOfBandInfo").onInterface(INTERFACE_NAME).withGetter([this](){ return this->OutOfBandInfo(); });
        object_.registerProperty("URI").onInterface(INTERFACE_NAME).withGetter([this](){ return this->URI(); });
    }

    ~ProvisionAgent1_adaptor() = default;

private:
    virtual std::vector<uint8_t> PrivateKey() = 0;
    virtual std::vector<uint8_t> PublicKey() = 0;
    virtual void DisplayString(const std::string& value) = 0;
    virtual void DisplayNumeric(const std::string& type, const uint32_t& number) = 0;
    virtual uint32_t PromptNumeric(const std::string& type) = 0;
    virtual std::vector<uint8_t> PromptStatic(const std::string& type) = 0;
    virtual void Cancel() = 0;

private:
    virtual std::vector<std::string> Capabilities() = 0;
    virtual std::vector<std::string> OutOfBandInfo() = 0;
    virtual std::string URI() = 0;

private:
    sdbus::IObject& object_;
};

}}} // namespaces

#endif
