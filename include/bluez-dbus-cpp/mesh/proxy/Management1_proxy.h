
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp_____include_bluez_dbus_cpp_mesh_proxy_Management1_proxy_h__proxy__H__
#define __sdbuscpp_____include_bluez_dbus_cpp_mesh_proxy_Management1_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {
namespace mesh {

class Management1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.mesh.Management1";

protected:
    Management1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Management1_proxy() = default;

public:
    void UnprovisionedScan(const std::map<std::string, sdbus::Variant>& options)
    {
        proxy_.callMethod("UnprovisionedScan").onInterface(INTERFACE_NAME).withArguments(options);
    }

    void UnprovisionedScanCancel()
    {
        proxy_.callMethod("UnprovisionedScanCancel").onInterface(INTERFACE_NAME);
    }

    void AddNode(const std::vector<uint8_t>& uuid, const std::map<std::string, sdbus::Variant>& options)
    {
        proxy_.callMethod("AddNode").onInterface(INTERFACE_NAME).withArguments(uuid, options);
    }

    void CreateSubnet(const uint16_t& net_index)
    {
        proxy_.callMethod("CreateSubnet").onInterface(INTERFACE_NAME).withArguments(net_index);
    }

    void ImportSubnet(const uint16_t& net_index, const std::vector<uint8_t>& net_key)
    {
        proxy_.callMethod("ImportSubnet").onInterface(INTERFACE_NAME).withArguments(net_index, net_key);
    }

    void UpdateSubnet(const uint16_t& net_index)
    {
        proxy_.callMethod("UpdateSubnet").onInterface(INTERFACE_NAME).withArguments(net_index);
    }

    void DeleteSubnet(const uint16_t& net_index)
    {
        proxy_.callMethod("DeleteSubnet").onInterface(INTERFACE_NAME).withArguments(net_index);
    }

    void SetKeyPhase(const uint16_t& net_index, const uint8_t& phase)
    {
        proxy_.callMethod("SetKeyPhase").onInterface(INTERFACE_NAME).withArguments(net_index, phase);
    }

    void CreateAppKey(const uint16_t& net_index, const uint16_t& app_index)
    {
        proxy_.callMethod("CreateAppKey").onInterface(INTERFACE_NAME).withArguments(net_index, app_index);
    }

    void ImportAppKey(const uint16_t& net_index, const uint16_t& app_index, const std::vector<uint8_t>& app_key)
    {
        proxy_.callMethod("ImportAppKey").onInterface(INTERFACE_NAME).withArguments(net_index, app_index, app_key);
    }

    void UpdateAppKey(const uint16_t& app_index)
    {
        proxy_.callMethod("UpdateAppKey").onInterface(INTERFACE_NAME).withArguments(app_index);
    }

    void DeleteAppKey(const uint16_t& app_index)
    {
        proxy_.callMethod("DeleteAppKey").onInterface(INTERFACE_NAME).withArguments(app_index);
    }

    void ImportRemoteNode(const uint16_t& primary, const uint8_t& count, const std::vector<uint8_t>& device_key)
    {
        proxy_.callMethod("ImportRemoteNode").onInterface(INTERFACE_NAME).withArguments(primary, count, device_key);
    }

    void DeleteRemoteNode(const uint16_t& primary, const uint8_t& count)
    {
        proxy_.callMethod("DeleteRemoteNode").onInterface(INTERFACE_NAME).withArguments(primary, count);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
