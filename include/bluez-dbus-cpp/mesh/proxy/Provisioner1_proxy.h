
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp_____include_bluez_dbus_cpp_mesh_proxy_Provisioner1_proxy_h__proxy__H__
#define __sdbuscpp_____include_bluez_dbus_cpp_mesh_proxy_Provisioner1_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {
namespace mesh {

class Provisioner1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.mesh.Provisioner1";

protected:
    Provisioner1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Provisioner1_proxy() = default;

public:
    void ScanResult(const int16_t& rssi, const std::vector<uint8_t>& data, const std::map<std::string, sdbus::Variant>& options)
    {
        proxy_.callMethod("ScanResult").onInterface(INTERFACE_NAME).withArguments(rssi, data, options);
    }

    std::tuple<uint16_t, uint16_t> RequestProvData(const uint8_t& count)
    {
        std::tuple<uint16_t, uint16_t> result;
        proxy_.callMethod("RequestProvData").onInterface(INTERFACE_NAME).withArguments(count).storeResultsTo(result);
        return result;
    }

    void AddNodeComplete(const std::vector<uint8_t>& uuid, const uint16_t& unicast, const uint8_t& count)
    {
        proxy_.callMethod("AddNodeComplete").onInterface(INTERFACE_NAME).withArguments(uuid, unicast, count);
    }

    void AddNodeFailed(const std::vector<uint8_t>& uuid, const std::string& reason)
    {
        proxy_.callMethod("AddNodeFailed").onInterface(INTERFACE_NAME).withArguments(uuid, reason);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
