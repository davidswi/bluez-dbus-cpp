
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp_____include_bluez_dbus_cpp_mesh_proxy_Network1_proxy_h__proxy__H__
#define __sdbuscpp_____include_bluez_dbus_cpp_mesh_proxy_Network1_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {
namespace mesh {

class Network1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.mesh.Network1";

protected:
    Network1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Network1_proxy() = default;

public:
    void Join(const sdbus::ObjectPath& app_root, const std::vector<uint8_t>& uuid)
    {
        proxy_.callMethod("Join").onInterface(INTERFACE_NAME).withArguments(app_root, uuid);
    }

    void Cancel()
    {
        proxy_.callMethod("Cancel").onInterface(INTERFACE_NAME);
    }

    std::tuple<sdbus::ObjectPath, std::vector<sdbus::Struct<uint8_t, std::vector<sdbus::Struct<uint16_t, std::map<std::string, sdbus::Variant>>>>>> Attach(const sdbus::ObjectPath& app_root, const uint64_t& token)
    {
        std::tuple<sdbus::ObjectPath, std::vector<sdbus::Struct<uint8_t, std::vector<sdbus::Struct<uint16_t, std::map<std::string, sdbus::Variant>>>>>> result;
        proxy_.callMethod("Attach").onInterface(INTERFACE_NAME).withArguments(app_root, token).storeResultsTo(result);
        return result;
    }

    void Leave(const uint64_t& token)
    {
        proxy_.callMethod("Leave").onInterface(INTERFACE_NAME).withArguments(token);
    }

    void CreateNetwork(const sdbus::ObjectPath& app_root, const std::vector<uint8_t>& uuid)
    {
        proxy_.callMethod("CreateNetwork").onInterface(INTERFACE_NAME).withArguments(app_root, uuid);
    }

    void Import(const sdbus::ObjectPath& app_root, const std::vector<uint8_t>& uuid, const std::vector<uint8_t>& dev_key, const std::vector<uint8_t>& net_key, const uint16_t& net_index, const std::map<std::string, sdbus::Variant>& flags, const uint32_t& iv_index, const uint16_t& unicast)
    {
        proxy_.callMethod("Import").onInterface(INTERFACE_NAME).withArguments(app_root, uuid, dev_key, net_key, net_index, flags, iv_index, unicast);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
