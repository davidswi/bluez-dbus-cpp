
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp_____include_bluez_dbus_cpp_mesh_proxy_ProvisionAgent1_proxy_h__proxy__H__
#define __sdbuscpp_____include_bluez_dbus_cpp_mesh_proxy_ProvisionAgent1_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {
namespace mesh {

class ProvisionAgent1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.mesh.ProvisionAgent1";

protected:
    ProvisionAgent1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~ProvisionAgent1_proxy() = default;

public:
    std::vector<uint8_t> PrivateKey()
    {
        std::vector<uint8_t> result;
        proxy_.callMethod("PrivateKey").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::vector<uint8_t> PublicKey()
    {
        std::vector<uint8_t> result;
        proxy_.callMethod("PublicKey").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void DisplayString(const std::string& value)
    {
        proxy_.callMethod("DisplayString").onInterface(INTERFACE_NAME).withArguments(value);
    }

    void DisplayNumeric(const std::string& type, const uint32_t& number)
    {
        proxy_.callMethod("DisplayNumeric").onInterface(INTERFACE_NAME).withArguments(type, number);
    }

    uint32_t PromptNumeric(const std::string& type)
    {
        uint32_t result;
        proxy_.callMethod("PromptNumeric").onInterface(INTERFACE_NAME).withArguments(type).storeResultsTo(result);
        return result;
    }

    std::vector<uint8_t> PromptStatic(const std::string& type)
    {
        std::vector<uint8_t> result;
        proxy_.callMethod("PromptStatic").onInterface(INTERFACE_NAME).withArguments(type).storeResultsTo(result);
        return result;
    }

    void Cancel()
    {
        proxy_.callMethod("Cancel").onInterface(INTERFACE_NAME);
    }

public:
    std::vector<std::string> Capabilities()
    {
        return proxy_.getProperty("Capabilities").onInterface(INTERFACE_NAME);
    }

    std::vector<std::string> OutOfBandInfo()
    {
        return proxy_.getProperty("OutOfBandInfo").onInterface(INTERFACE_NAME);
    }

    std::string URI()
    {
        return proxy_.getProperty("URI").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
