
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp_____include_bluez_dbus_cpp_mesh_proxy_Node1_proxy_h__proxy__H__
#define __sdbuscpp_____include_bluez_dbus_cpp_mesh_proxy_Node1_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {
namespace mesh {

class Node1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.bluez.mesh.Node1";

protected:
    Node1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Node1_proxy() = default;

public:
    void Send(const sdbus::ObjectPath& element_path, const uint16_t& destination, const uint16_t& key_index, const std::map<std::string, sdbus::Variant>& options, const std::vector<uint8_t>& data)
    {
        proxy_.callMethod("Send").onInterface(INTERFACE_NAME).withArguments(element_path, destination, key_index, options, data);
    }

    void DevKeySend(const sdbus::ObjectPath& element_path, const uint16_t& destination, const bool& remote, const uint16_t& net_index, const std::map<std::string, sdbus::Variant>& options, const std::vector<uint8_t>& data)
    {
        proxy_.callMethod("DevKeySend").onInterface(INTERFACE_NAME).withArguments(element_path, destination, remote, net_index, options, data);
    }

    void AddNetKey(const sdbus::ObjectPath& element_path, const uint16_t& destination, const uint16_t& subnet_index, const uint16_t& net_index, const bool& update)
    {
        proxy_.callMethod("AddNetKey").onInterface(INTERFACE_NAME).withArguments(element_path, destination, subnet_index, net_index, update);
    }

    void AddAppKey(const sdbus::ObjectPath& element_path, const uint16_t& destination, const uint16_t& app_index, const uint16_t& net_index, const bool& update)
    {
        proxy_.callMethod("AddAppKey").onInterface(INTERFACE_NAME).withArguments(element_path, destination, app_index, net_index, update);
    }

    void Publish(const sdbus::ObjectPath& element_path, const uint16_t& model, const std::map<std::string, sdbus::Variant>& options, const std::vector<uint8_t>& data)
    {
        proxy_.callMethod("Publish").onInterface(INTERFACE_NAME).withArguments(element_path, model, options, data);
    }

public:
    std::map<std::string, sdbus::Variant> Features()
    {
        return proxy_.getProperty("Features").onInterface(INTERFACE_NAME);
    }

    bool Beacon()
    {
        return proxy_.getProperty("Beacon").onInterface(INTERFACE_NAME);
    }

    bool IvUpdate()
    {
        return proxy_.getProperty("IvUpdate").onInterface(INTERFACE_NAME);
    }

    uint32_t IvIndex()
    {
        return proxy_.getProperty("IvIndex").onInterface(INTERFACE_NAME);
    }

    uint32_t SecondsSinceLastHeard()
    {
        return proxy_.getProperty("SecondsSinceLastHeard").onInterface(INTERFACE_NAME);
    }

    std::vector<uint16_t> Addresses()
    {
        return proxy_.getProperty("Addresses").onInterface(INTERFACE_NAME);
    }

    uint32_t SequenceNumber()
    {
        return proxy_.getProperty("SequenceNumber").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
